name: bazaarMKT CI/CD Pipeline

on:
  push:
    branches: [ main ]  # Only deploy from main branch to production
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint || echo "Linting not configured, skipping..."

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/bazaarmkt-test
        JWT_SECRET: test-jwt-secret
        PORT: 4000

    - name: Generate backend test coverage
      working-directory: ./backend
      run: npm run test:coverage || echo "Coverage not configured, skipping..."

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting not configured, skipping..."

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Start backend server
      working-directory: ./backend
      run: |
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/bazaarmkt-test
        JWT_SECRET: test-jwt-secret
        PORT: 4000

    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:4000/api/health || exit 1
        echo "Backend health check passed"

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        
        # Deploy frontend to Vercel
        echo "Deploying frontend to Vercel..."
        npm install -g vercel
        vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes --cwd frontend
        
        # Deploy backend to Railway
        echo "Deploying backend to Railway..."
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up --service backend

    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment health checks..."
        # Wait for deployment to be ready
        sleep 30
        
        # Test backend health
        curl -f ${{ secrets.BACKEND_URL }}/api/health || exit 1
        echo "Backend health check passed"
        
        # Test frontend
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1
        echo "Frontend health check passed"

    - name: Notify deployment status
      run: |
        echo "Deployment completed successfully!"
        # Send notification to Slack (optional)
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ bazaarMKT deployed successfully!\nFrontend: ${{ secrets.FRONTEND_URL }}\nBackend: ${{ secrets.BACKEND_URL }}"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
        fi

  # Rollback job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Rollback deployment
      run: |
        echo "Rolling back to previous version..."
        
        # Rollback frontend (Vercel automatically handles rollbacks)
        echo "Rolling back frontend..."
        vercel --token ${{ secrets.VERCEL_TOKEN }} rollback --cwd frontend
        
        # Rollback backend (Railway)
        echo "Rolling back backend..."
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway rollback --service backend
        
        echo "Rollback completed!"
