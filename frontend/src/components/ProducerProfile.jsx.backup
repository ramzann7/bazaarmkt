import React, { useState, useEffect } from 'react';
import { 
  UserIcon, 
  MapPinIcon, 
  BellIcon, 
  CreditCardIcon, 
  CogIcon, 
  ShieldCheckIcon,
  CameraIcon,
  PlusIcon,
  TrashIcon,
  ShoppingBagIcon,
  CubeIcon,
  ClockIcon,
  TruckIcon,
  ChartBarIcon,
  PhotoIcon,
  TagIcon,
  CurrencyDollarIcon,
  ScaleIcon
} from '@heroicons/react/24/outline';
import { profileService } from '../services/profileService';
import { authToken } from '../services/authService';
import { productService } from '../services/productService';
import toast from 'react-hot-toast';

export default function ProducerProfile() {
  const [activeTab, setActiveTab] = useState('overview');
  const [profile, setProfile] = useState(null);
  const [producerProfile, setProducerProfile] = useState(null);
  const [products, setProducts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);

  const tabs = [
    { id: 'overview', name: 'Overview', icon: ChartBarIcon },
    ...(producerProfile ? [
      { id: 'products', name: 'My Products', icon: CubeIcon },
      { id: 'orders', name: 'Orders', icon: ShoppingBagIcon },
      { id: 'operations', name: 'Operations', icon: CogIcon },
      { id: 'hours', name: 'Business Hours', icon: ClockIcon },
      { id: 'delivery', name: 'Delivery', icon: TruckIcon }
    ] : [
      { id: 'setup', name: 'Setup Profile', icon: CogIcon }
    ]),
    { id: 'personal', name: 'Personal Info', icon: UserIcon },
    { id: 'notifications', name: 'Notifications', icon: BellIcon },
    { id: 'payment', name: 'Payment', icon: CreditCardIcon },
    { id: 'security', name: 'Security', icon: ShieldCheckIcon }
  ];

  useEffect(() => {
    loadProfiles();
  }, []);

  const loadProfiles = async () => {
    try {
      setIsLoading(true);
      const userProfile = await profileService.getProfile();
      setProfile(userProfile);
      
      // Try to load producer profile, but don't fail if it doesn't exist yet
      try {
        const producerData = await profileService.getProducerProfile();
        setProducerProfile(producerData);
        
        // Load products if producer profile exists
        if (producerData._id) {
          try {
            const productsData = await productService.getProductsByProducer(producerData._id);
            setProducts(productsData);
          } catch (productsError) {
            console.error('Error loading products:', productsError);
            setProducts([]);
          }
        }
      } catch (producerError) {
        console.log('No producer profile found yet, will create one when needed');
        setProducerProfile(null);
        setProducts([]);
      }
    } catch (error) {
      console.error('Error loading profiles:', error);
      toast.error('Failed to load profile');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSave = async (section, data) => {
    try {
      setIsSaving(true);
      let updatedProfile;

      switch (section) {
        case 'personal':
          updatedProfile = await profileService.updateBasicProfile(data);
          setProfile(updatedProfile);
          break;
        case 'producer':
          updatedProfile = await profileService.updateProducerProfile(data);
          setProducerProfile(updatedProfile);
          break;
        case 'operations':
          updatedProfile = await profileService.updateProducerOperations(data);
          setProducerProfile(updatedProfile);
          break;
        case 'hours':
          updatedProfile = await profileService.updateProducerHours(data);
          setProducerProfile(updatedProfile);
          break;
        case 'delivery':
          updatedProfile = await profileService.updateProducerDelivery(data);
          setProducerProfile(updatedProfile);
          break;
        case 'notifications':
          updatedProfile = await profileService.updateNotifications(data);
          setProfile(updatedProfile);
          break;
        default:
          return;
      }

      toast.success('Profile updated successfully');
    } catch (error) {
      toast.error('Failed to update profile');
      console.error('Error updating profile:', error);
    } finally {
      setIsSaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading profile...</p>
        </div>
      </div>
    );
  }

  if (!profile) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Profile Not Found</h2>
          <p className="text-gray-600 mb-4">Unable to load your profile information.</p>
          <button 
            onClick={loadProfiles}
            className="btn-primary"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Local Producer Profile</h1>
          <p className="text-gray-600">Manage your products, orders, and business operations</p>
        </div>

        <div className="bg-white rounded-2xl shadow-sm border border-gray-100">
          {/* Tab Navigation */}
          <div className="border-b border-gray-200 overflow-x-auto">
            <nav className="flex space-x-8 px-6 min-w-max" aria-label="Tabs">
              {tabs.map((tab) => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 whitespace-nowrap ${
                      activeTab === tab.id
                        ? 'border-orange-500 text-orange-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    <Icon className="w-5 h-5" />
                    <span>{tab.name}</span>
                  </button>
                );
              })}
            </nav>
          </div>

          {/* Tab Content */}
          <div className="p-6">
            {activeTab === 'overview' && (
              <OverviewTab profile={profile} producerProfile={producerProfile} products={products} />
            )}
            {activeTab === 'setup' && (
              <SetupTab 
                onSave={(data) => handleSave('producer', data)}
                isSaving={isSaving}
              />
            )}
            {activeTab === 'products' && (
              <ProductsTab 
                producerProfile={producerProfile} 
                products={products}
                onProductsChange={setProducts}
              />
            )}
            {activeTab === 'orders' && (
              <OrdersTab />
            )}
            {activeTab === 'operations' && (
              <OperationsTab 
                producerProfile={producerProfile} 
                onSave={(data) => handleSave('operations', data)}
                isSaving={isSaving}
              />
            )}
            {activeTab === 'hours' && (
              <BusinessHoursTab 
                producerProfile={producerProfile} 
                onSave={(data) => handleSave('hours', data)}
                isSaving={isSaving}
              />
            )}
            {activeTab === 'delivery' && (
              <DeliveryTab 
                producerProfile={producerProfile} 
                onSave={(data) => handleSave('delivery', data)}
                isSaving={isSaving}
              />
            )}
            {activeTab === 'personal' && (
              <PersonalInfoTab 
                profile={profile} 
                onSave={(data) => handleSave('personal', data)}
                isSaving={isSaving}
              />
            )}
            {activeTab === 'notifications' && (
              <NotificationsTab 
                profile={profile} 
                onSave={(data) => handleSave('notifications', data)}
                isSaving={isSaving}
              />
            )}
            {activeTab === 'payment' && (
              <PaymentTab />
            )}
            {activeTab === 'security' && (
              <SecurityTab />
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

function EditProductForm({ product, onClose, onSuccess, categories, units }) {
  // TODO: Implement edit product form
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-lg font-semibold text-gray-900">Edit Product</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <TrashIcon className="w-6 h-6" />
          </button>
        </div>
        <div className="text-center py-8">
          <p className="text-gray-600">Edit product functionality coming soon!</p>
          <button onClick={onClose} className="btn-primary mt-4">Close</button>
        </div>
      </div>
    </div>
  );
}

// Tab Components
function OverviewTab({ profile, producerProfile, products = [] }) {
  if (!producerProfile) {
    return (
      <div>
        <h3 className="text-lg font-semibold text-gray-900 mb-6">Welcome to Your Producer Dashboard</h3>
        
        <div className="bg-orange-50 border border-orange-200 rounded-lg p-8 text-center">
          <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <CubeIcon className="w-8 h-8 text-orange-600" />
          </div>
          <h4 className="text-xl font-semibold text-orange-900 mb-2">Set Up Your Producer Profile</h4>
          <p className="text-orange-700 mb-6">
            Complete your business profile to start selling your local produce and connect with buyers in your area.
          </p>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-left">
            <div className="bg-white rounded-lg p-4">
              <h5 className="font-semibold text-gray-900 mb-2">1. Business Info</h5>
              <p className="text-sm text-gray-600">Add your business name, type, and category</p>
            </div>
            <div className="bg-white rounded-lg p-4">
              <h5 className="font-semibold text-gray-900 mb-2">2. Operations</h5>
              <p className="text-sm text-gray-600">Describe your farming methods and practices</p>
            </div>
            <div className="bg-white rounded-lg p-4">
              <h5 className="font-semibold text-gray-900 mb-2">3. Products</h5>
              <p className="text-sm text-gray-600">List your products and set pricing</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Business Overview</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-orange-50 rounded-lg p-6">
          <div className="flex items-center">
            <CubeIcon className="w-8 h-8 text-orange-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-orange-600">Active Products</p>
              <p className="text-2xl font-bold text-orange-900">{products.length}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-green-50 rounded-lg p-6">
          <div className="flex items-center">
            <ShoppingBagIcon className="w-8 h-8 text-green-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-green-600">Pending Orders</p>
              <p className="text-2xl font-bold text-green-900">0</p>
            </div>
          </div>
        </div>
        
        <div className="bg-blue-50 rounded-lg p-6">
          <div className="flex items-center">
            <CurrencyDollarIcon className="w-8 h-8 text-blue-600" />
            <div className="ml-4">
              <p className="text-sm font-medium text-blue-600">This Month</p>
              <p className="text-2xl font-bold text-blue-900">$0</p>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <h4 className="font-semibold text-gray-900 mb-4">Business Information</h4>
          <div className="space-y-3">
            <div>
              <p className="text-sm text-gray-600">Business Name</p>
              <p className="font-medium">{producerProfile?.name || 'Not set'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Type</p>
              <p className="font-medium capitalize">{producerProfile?.type || 'Not set'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Category</p>
              <p className="font-medium">{producerProfile?.category || 'Not set'}</p>
            </div>
          </div>
        </div>

        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <h4 className="font-semibold text-gray-900 mb-4">Contact Information</h4>
          <div className="space-y-3">
            <div>
              <p className="text-sm text-gray-600">Email</p>
              <p className="font-medium">{profile?.email}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Phone</p>
              <p className="font-medium">{profile?.phone || 'Not set'}</p>
            </div>
            <div>
              <p className="text-sm text-gray-600">Location</p>
              <p className="font-medium">
                {producerProfile?.address?.city ? 
                  `${producerProfile.address.city}, ${producerProfile.address.state}` : 
                  'Not set'
                }
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

function ProductsTab({ producerProfile, products, onProductsChange }) {
  const [showAddForm, setShowAddForm] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);

  const categories = [
    { value: 'produce', label: 'Fresh Produce', icon: '🍎' },
    { value: 'eggs', label: 'Fresh Eggs', icon: '🥚' },
    { value: 'bread', label: 'Fresh Bread', icon: '🍞' },
    { value: 'dairy', label: 'Dairy', icon: '🥛' },
    { value: 'meat', label: 'Meat & Poultry', icon: '🍗' },
    { value: 'honey', label: 'Honey & Jams', icon: '🍯' },
    { value: 'herbs', label: 'Herbs & Spices', icon: '🌿' },
    { value: 'cakes', label: 'Cakes & Pastries', icon: '🎂' },
    { value: 'coffee', label: 'Coffee & Tea', icon: '☕' },
    { value: 'jams', label: 'Jams & Preserves', icon: '🍓' },
    { value: 'pickles', label: 'Pickles & Ferments', icon: '🥒' },
    { value: 'sauces', label: 'Sauces & Condiments', icon: '🍅' },
    { value: 'spices', label: 'Spices & Seasonings', icon: '🧂' },
    { value: 'nuts', label: 'Nuts & Seeds', icon: '🥜' },
    { value: 'grains', label: 'Grains & Flour', icon: '🌾' },
    { value: 'cheese', label: 'Artisan Cheese', icon: '🧀' },
    { value: 'chocolate', label: 'Chocolate & Candies', icon: '🍫' },
    { value: 'flowers', label: 'Flowers & Plants', icon: '🌸' },
    { value: 'other', label: 'Other', icon: '📦' }
  ];

  const units = [
    { value: 'kg', label: 'Kilogram (kg)' },
    { value: 'lb', label: 'Pound (lb)' },
    { value: 'dozen', label: 'Dozen' },
    { value: 'piece', label: 'Piece' },
    { value: 'bunch', label: 'Bunch' },
    { value: 'jar', label: 'Jar' },
    { value: 'bottle', label: 'Bottle' },
    { value: 'bag', label: 'Bag' },
    { value: 'box', label: 'Box' },
    { value: 'slice', label: 'Slice' },
    { value: 'loaf', label: 'Loaf' },
    { value: 'cake', label: 'Cake' },
    { value: 'muffin', label: 'Muffin' },
    { value: 'cookie', label: 'Cookie' },
    { value: 'cup', label: 'Cup' },
    { value: 'tbsp', label: 'Tablespoon (tbsp)' },
    { value: 'tsp', label: 'Teaspoon (tsp)' },
    { value: 'oz', label: 'Ounce (oz)' },
    { value: 'g', label: 'Gram (g)' },
    { value: 'ml', label: 'Milliliter (ml)' },
    { value: 'l', label: 'Liter (l)' }
  ];

  const handleProductCreated = (newProduct) => {
    onProductsChange([...products, newProduct]);
    setShowAddForm(false);
  };

  const handleProductUpdated = (updatedProduct) => {
    onProductsChange(products.map(p => p._id === updatedProduct._id ? updatedProduct : p));
    setEditingProduct(null);
  };

  const handleProductDeleted = (productId) => {
    onProductsChange(products.filter(p => p._id !== productId));
  };

  const handleInventoryUpdated = (updatedProduct) => {
    onProductsChange(products.map(p => p._id === updatedProduct._id ? updatedProduct : p));
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h3 className="text-lg font-semibold text-gray-900">My Products</h3>
        <button
          onClick={() => setShowAddForm(true)}
          className="btn-primary flex items-center space-x-2"
        >
          <PlusIcon className="w-4 h-4" />
          <span>Add Product</span>
        </button>
      </div>

      {showAddForm && (
        <AddProductForm 
          onClose={() => setShowAddForm(false)}
          onSuccess={handleProductCreated}
          categories={categories}
          units={units}
        />
      )}

      {editingProduct && (
        <EditProductForm 
          product={editingProduct}
          onClose={() => setEditingProduct(null)}
          onSuccess={handleProductUpdated}
          categories={categories}
          units={units}
        />
      )}

      {isLoading ? (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mx-auto"></div>
          <p className="text-gray-600 mt-2">Loading products...</p>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {products.length === 0 ? (
            <div className="col-span-full text-center py-12">
              <CubeIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-600 mb-4">No products listed yet</p>
              <button
                onClick={() => setShowAddForm(true)}
                className="btn-primary"
              >
                Add Your First Product
              </button>
            </div>
          ) : (
            products.map((product) => (
              <ProductCard 
                key={product._id} 
                product={product} 
                onEdit={() => setEditingProduct(product)}
                onDelete={handleProductDeleted}
                onInventoryUpdate={handleInventoryUpdated}
              />
            ))
          )}
        </div>
      )}
    </div>
  );
}

function ProductCard({ product, onEdit, onDelete, onInventoryUpdate }) {
  const [isDeleting, setIsDeleting] = useState(false);
  const [isUpdatingInventory, setIsUpdatingInventory] = useState(false);
  const [showInventoryModal, setShowInventoryModal] = useState(false);
  const [inventoryData, setInventoryData] = useState({
    quantityAvailable: product.quantityAvailable,
    dailyCap: product.dailyCap
  });

  const handleDelete = async () => {
    if (window.confirm('Are you sure you want to delete this product?')) {
      setIsDeleting(true);
      try {
        await productService.deleteProduct(product._id);
        onDelete(product._id);
        toast.success('Product deleted successfully');
      } catch (error) {
        console.error('Error deleting product:', error);
        toast.error(error.response?.data?.message || 'Failed to delete product');
      } finally {
        setIsDeleting(false);
      }
    }
  };

  const handleInventoryUpdate = async () => {
    setIsUpdatingInventory(true);
    try {
      const updatedProduct = await productService.updateInventory(product._id, inventoryData);
      onInventoryUpdate(updatedProduct);
      setShowInventoryModal(false);
      toast.success('Inventory updated successfully');
    } catch (error) {
      console.error('Error updating inventory:', error);
      toast.error(error.response?.data?.message || 'Failed to update inventory');
    } finally {
      setIsUpdatingInventory(false);
    }
  };

  const primaryPhoto = product.photos?.find(photo => photo.isPrimary) || product.photos?.[0];

  return (
    <div className="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
      {/* Product Image */}
      <div className="relative h-48 bg-gray-100">
        {primaryPhoto ? (
          <img
            src={primaryPhoto.url}
            alt={product.title}
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full flex items-center justify-center">
            <PhotoIcon className="w-12 h-12 text-gray-400" />
          </div>
        )}
        
        {/* Status Badge */}
        <div className="absolute top-2 left-2">
          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
            product.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
          }`}>
            {product.isActive ? 'Active' : 'Inactive'}
          </span>
        </div>

        {/* Action Buttons */}
        <div className="absolute top-2 right-2 flex space-x-1">
          <button
            onClick={() => setShowInventoryModal(true)}
            className="p-1 bg-blue-500 text-white rounded shadow-sm hover:bg-blue-600"
            title="Manage inventory"
          >
            <ScaleIcon className="w-4 h-4" />
          </button>
          <button
            onClick={onEdit}
            className="p-1 bg-white rounded shadow-sm hover:bg-gray-50"
            title="Edit product"
          >
            <CogIcon className="w-4 h-4 text-gray-600" />
          </button>
          <button
            onClick={handleDelete}
            disabled={isDeleting}
            className="p-1 bg-red-500 text-white rounded shadow-sm hover:bg-red-600 disabled:opacity-50"
            title="Delete product"
          >
            {isDeleting ? (
              <div className="animate-spin rounded-full h-3 w-3 border-b border-white"></div>
            ) : (
              <TrashIcon className="w-4 h-4" />
            )}
          </button>
        </div>
      </div>

      {/* Product Info */}
      <div className="p-4">
        <h4 className="font-semibold text-gray-900 mb-1">{product.title}</h4>
        <p className="text-sm text-gray-600 mb-2 line-clamp-2">{product.description}</p>
        
        <div className="flex items-center justify-between mb-2">
          <span className="text-lg font-bold text-orange-600">
            ${product.price}/{product.unit}
          </span>
          <span className="text-sm text-gray-500">
            {product.quantityAvailable} available
          </span>
        </div>

        <div className="flex items-center justify-between text-sm text-gray-500">
          <span className="capitalize">{product.category}</span>
          <div className="flex space-x-1">
            {product.isOrganic && (
              <span className="px-1 py-0.5 bg-green-100 text-green-800 rounded text-xs">
                Organic
              </span>
            )}
            {product.isLocal && (
              <span className="px-1 py-0.5 bg-blue-100 text-blue-800 rounded text-xs">
                Local
              </span>
            )}
          </div>
        </div>

        {product.tags && product.tags.length > 0 && (
          <div className="mt-2 flex flex-wrap gap-1">
            {product.tags.slice(0, 3).map((tag, index) => (
              <span
                key={index}
                className="px-1 py-0.5 bg-gray-100 text-gray-600 rounded text-xs"
              >
                {tag}
              </span>
            ))}
            {product.tags.length > 3 && (
              <span className="px-1 py-0.5 bg-gray-100 text-gray-600 rounded text-xs">
                +{product.tags.length - 3} more
              </span>
            )}
          </div>
        )}
      </div>

      {/* Inventory Management Modal */}
      {showInventoryModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Manage Inventory</h3>
              <button 
                onClick={() => setShowInventoryModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                ×
              </button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Available Quantity
                </label>
                <input
                  type="number"
                  min="0"
                  value={inventoryData.quantityAvailable}
                  onChange={(e) => setInventoryData({
                    ...inventoryData,
                    quantityAvailable: parseInt(e.target.value) || 0
                  })}
                  className="input-field"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Daily Cap (0 = no limit)
                </label>
                <input
                  type="number"
                  min="0"
                  value={inventoryData.dailyCap}
                  onChange={(e) => setInventoryData({
                    ...inventoryData,
                    dailyCap: parseInt(e.target.value) || 0
                  })}
                  className="input-field"
                />
              </div>
            </div>

            <div className="flex justify-end space-x-3 mt-6">
              <button
                onClick={() => setShowInventoryModal(false)}
                className="btn-secondary"
              >
                Cancel
              </button>
              <button
                onClick={handleInventoryUpdate}
                disabled={isUpdatingInventory}
                className="btn-primary disabled:opacity-50"
              >
                {isUpdatingInventory ? 'Updating...' : 'Update Inventory'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

function AddProductForm({ onClose, onSuccess, categories, units }) {
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: '',
    unit: '',
    price: '',
    quantityAvailable: '',
    dailyCap: '',
    leadTimeHours: '24',
    isOrganic: false,
    isLocal: true,
    tags: []
  });
  const [photos, setPhotos] = useState([]);
  const [uploadingPhotos, setUploadingPhotos] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [tagInput, setTagInput] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.title || !formData.description || !formData.category || 
        !formData.unit || !formData.price || !formData.quantityAvailable) {
      toast.error('Please fill in all required fields');
      return;
    }

    setIsSubmitting(true);
    try {
      // Prepare product data
      const productData = {
        title: formData.title,
        description: formData.description,
        category: formData.category,
        unit: formData.unit,
        price: parseFloat(formData.price),
        quantityAvailable: parseInt(formData.quantityAvailable),
        dailyCap: formData.dailyCap ? parseInt(formData.dailyCap) : 0,
        leadTimeHours: parseInt(formData.leadTimeHours),
        isOrganic: formData.isOrganic,
        isLocal: formData.isLocal,
        tags: formData.tags,
        photos: photos.map(photo => ({
          url: photo.url,
          caption: photo.caption,
          isPrimary: photo.isPrimary
        }))
      };

      const newProduct = await productService.createProduct(productData);
      onSuccess(newProduct);
      toast.success('Product created successfully!');
    } catch (error) {
      console.error('Error creating product:', error);
      toast.error(error.response?.data?.message || 'Failed to create product');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handlePhotoUpload = async (files) => {
    setUploadingPhotos(true);
    try {
      const uploadedPhotos = [];
      for (let file of files) {
        try {
          const uploadResult = await productService.uploadPhoto(file);
          uploadedPhotos.push({
            url: uploadResult.url,
            caption: '',
            isPrimary: photos.length === 0 // First photo is primary
          });
        } catch (uploadError) {
          console.error('Error uploading individual photo:', uploadError);
          // Fallback to mock upload for now
          const mockUrl = URL.createObjectURL(file);
          uploadedPhotos.push({
            url: mockUrl,
            caption: '',
            isPrimary: photos.length === 0
          });
        }
      }
      setPhotos([...photos, ...uploadedPhotos]);
      toast.success(`${files.length} photo(s) uploaded successfully!`);
    } catch (error) {
      console.error('Error uploading photos:', error);
      toast.error('Failed to upload photos');
    } finally {
      setUploadingPhotos(false);
    }
  };

  const handleRemovePhoto = (index) => {
    setPhotos(photos.filter((_, i) => i !== index));
  };

  const handleSetPrimaryPhoto = (index) => {
    setPhotos(photos.map((photo, i) => ({
      ...photo,
      isPrimary: i === index
    })));
  };

  const handleAddTag = () => {
    if (tagInput.trim() && !formData.tags.includes(tagInput.trim())) {
      setFormData({
        ...formData,
        tags: [...formData.tags, tagInput.trim()]
      });
      setTagInput('');
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setFormData({
      ...formData,
      tags: formData.tags.filter(tag => tag !== tagToRemove)
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-lg font-semibold text-gray-900">Add New Product</h3>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600">
            <TrashIcon className="w-6 h-6" />
          </button>
        </div>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Product Title *
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className="input-field"
                placeholder="e.g., Fresh Organic Apples"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Category *
              </label>
              <select
                value={formData.category}
                onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                className="input-field"
                required
              >
                <option value="">Select Category</option>
                {categories.map(category => (
                  <option key={category.value} value={category.value}>
                    {category.icon} {category.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Description *
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              className="input-field h-24"
              placeholder="Describe your product, ingredients, farming methods, etc."
              required
            />
          </div>

          {/* Photo Upload Section */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Product Photos
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
              <input
                type="file"
                multiple
                accept="image/*"
                onChange={(e) => handlePhotoUpload(e.target.files)}
                className="hidden"
                id="photo-upload"
                disabled={uploadingPhotos}
              />
              <label htmlFor="photo-upload" className="cursor-pointer">
                <PhotoIcon className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-600">
                  {uploadingPhotos ? 'Uploading...' : 'Click to upload photos or drag and drop'}
                </p>
                <p className="text-xs text-gray-500 mt-1">PNG, JPG up to 5MB each</p>
              </label>
            </div>
            
            {/* Photo Preview */}
            {photos.length > 0 && (
              <div className="mt-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Uploaded Photos</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  {photos.map((photo, index) => (
                    <div key={index} className="relative group">
                      <img
                        src={photo.url}
                        alt={`Product photo ${index + 1}`}
                        className="w-full h-24 object-cover rounded-lg"
                      />
                      <div className="absolute inset-0 bg-black bg-opacity-50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center">
                        <div className="flex space-x-2">
                          <button
                            type="button"
                            onClick={() => handleSetPrimaryPhoto(index)}
                            className="p-1 bg-white rounded text-xs"
                            title={photo.isPrimary ? 'Primary photo' : 'Set as primary'}
                          >
                            {photo.isPrimary ? '✓' : '★'}
                          </button>
                          <button
                            type="button"
                            onClick={() => handleRemovePhoto(index)}
                            className="p-1 bg-red-500 text-white rounded text-xs"
                            title="Remove photo"
                          >
                            ×
                          </button>
                        </div>
                      </div>
                      {photo.isPrimary && (
                        <div className="absolute top-1 left-1 bg-orange-500 text-white text-xs px-1 rounded">
                          Primary
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Unit *
              </label>
              <select
                value={formData.unit}
                onChange={(e) => setFormData({ ...formData, unit: e.target.value })}
                className="input-field"
                required
              >
                <option value="">Select Unit</option>
                {units.map(unit => (
                  <option key={unit.value} value={unit.value}>{unit.label}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Price per Unit *
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.price}
                onChange={(e) => setFormData({ ...formData, price: e.target.value })}
                className="input-field"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Quantity Available *
              </label>
              <input
                type="number"
                value={formData.quantityAvailable}
                onChange={(e) => setFormData({ ...formData, quantityAvailable: e.target.value })}
                className="input-field"
                required
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Daily Cap (0 = no limit)
              </label>
              <input
                type="number"
                value={formData.dailyCap}
                onChange={(e) => setFormData({ ...formData, dailyCap: e.target.value })}
                className="input-field"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Lead Time (hours)
              </label>
              <input
                type="number"
                value={formData.leadTimeHours}
                onChange={(e) => setFormData({ ...formData, leadTimeHours: e.target.value })}
                className="input-field"
              />
            </div>
          </div>

          {/* Tags Section */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Tags (optional)
            </label>
            <div className="flex space-x-2 mb-2">
              <input
                type="text"
                value={tagInput}
                onChange={(e) => setTagInput(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), handleAddTag())}
                className="input-field flex-1"
                placeholder="Add a tag and press Enter"
              />
              <button
                type="button"
                onClick={handleAddTag}
                className="btn-secondary px-4"
              >
                Add
              </button>
            </div>
            {formData.tags.length > 0 && (
              <div className="flex flex-wrap gap-2">
                {formData.tags.map((tag, index) => (
                  <span
                    key={index}
                    className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800"
                  >
                    {tag}
                    <button
                      type="button"
                      onClick={() => handleRemoveTag(tag)}
                      className="ml-1 text-orange-600 hover:text-orange-800"
                    >
                      ×
                    </button>
                  </span>
                ))}
              </div>
            )}
          </div>

          <div className="flex space-x-4">
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={formData.isOrganic}
                onChange={(e) => setFormData({ ...formData, isOrganic: e.target.checked })}
                className="rounded border-gray-300 text-orange-500 focus:ring-orange-500"
              />
              <span className="ml-2 text-sm text-gray-700">Organic</span>
            </label>
            <label className="flex items-center">
              <input
                type="checkbox"
                checked={formData.isLocal}
                onChange={(e) => setFormData({ ...formData, isLocal: e.target.checked })}
                className="rounded border-gray-300 text-orange-500 focus:ring-orange-500"
              />
              <span className="ml-2 text-sm text-gray-700">Local</span>
            </label>
          </div>

          <div className="flex justify-end space-x-4">
            <button
              type="button"
              onClick={onClose}
              className="btn-secondary"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className="btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <div className="flex items-center">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Creating Product...
                </div>
              ) : (
                'Add Product'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}



function OrdersTab() {
  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Order Management</h3>
      <div className="text-center py-12">
        <ShoppingBagIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <p className="text-gray-600">Order management and preparation tracking will be available here</p>
      </div>
    </div>
  );
}

function OperationsTab({ producerProfile, onSave, isSaving }) {
  const [formData, setFormData] = useState({
    farmingMethods: producerProfile?.operationDetails?.farmingMethods || '',
    sustainabilityPractices: producerProfile?.operationDetails?.sustainabilityPractices || '',
    certifications: producerProfile?.operationDetails?.certifications || [],
    yearsInBusiness: producerProfile?.operationDetails?.yearsInBusiness || '',
    productionCapacity: producerProfile?.operationDetails?.productionCapacity || '',
    qualityStandards: producerProfile?.operationDetails?.qualityStandards || ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Operation Details</h3>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Farming/Production Methods
          </label>
          <textarea
            value={formData.farmingMethods}
            onChange={(e) => setFormData({ ...formData, farmingMethods: e.target.value })}
            className="input-field h-24"
            placeholder="Describe your farming or production methods..."
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Sustainability Practices
          </label>
          <textarea
            value={formData.sustainabilityPractices}
            onChange={(e) => setFormData({ ...formData, sustainabilityPractices: e.target.value })}
            className="input-field h-24"
            placeholder="Describe your sustainability practices..."
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Years in Business
            </label>
            <input
              type="number"
              value={formData.yearsInBusiness}
              onChange={(e) => setFormData({ ...formData, yearsInBusiness: e.target.value })}
              className="input-field"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Production Capacity
            </label>
            <input
              type="text"
              value={formData.productionCapacity}
              onChange={(e) => setFormData({ ...formData, productionCapacity: e.target.value })}
              className="input-field"
              placeholder="e.g., 1000 kg per month"
            />
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Quality Standards
          </label>
          <textarea
            value={formData.qualityStandards}
            onChange={(e) => setFormData({ ...formData, qualityStandards: e.target.value })}
            className="input-field h-24"
            placeholder="Describe your quality standards and processes..."
          />
        </div>

        <div className="flex justify-end">
          <button
            type="submit"
            disabled={isSaving}
            className="btn-primary disabled:opacity-50"
          >
            {isSaving ? 'Saving...' : 'Save Operations'}
          </button>
        </div>
      </form>
    </div>
  );
}

function BusinessHoursTab({ producerProfile, onSave, isSaving }) {
  const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
  
  const [hours, setHours] = useState(
    producerProfile?.businessHours || days.reduce((acc, day) => ({
      ...acc,
      [day]: { open: '09:00', close: '17:00', closed: false }
    }), {})
  );

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(hours);
  };

  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Business Hours</h3>
      <form onSubmit={handleSubmit} className="space-y-4">
        {days.map((day) => (
          <div key={day} className="flex items-center space-x-4 p-4 border border-gray-200 rounded-lg">
            <div className="w-24">
              <label className="block text-sm font-medium text-gray-700 capitalize">
                {day}
              </label>
            </div>
            <div className="flex items-center space-x-4">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={!hours[day].closed}
                  onChange={(e) => setHours({
                    ...hours,
                    [day]: { ...hours[day], closed: !e.target.checked }
                  })}
                  className="rounded border-gray-300 text-orange-500 focus:ring-orange-500"
                />
                <span className="ml-2 text-sm text-gray-700">Open</span>
              </label>
              {!hours[day].closed && (
                <>
                  <input
                    type="time"
                    value={hours[day].open}
                    onChange={(e) => setHours({
                      ...hours,
                      [day]: { ...hours[day], open: e.target.value }
                    })}
                    className="input-field w-32"
                  />
                  <span className="text-gray-500">to</span>
                  <input
                    type="time"
                    value={hours[day].close}
                    onChange={(e) => setHours({
                      ...hours,
                      [day]: { ...hours[day], close: e.target.value }
                    })}
                    className="input-field w-32"
                  />
                </>
              )}
            </div>
          </div>
        ))}
        
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={isSaving}
            className="btn-primary disabled:opacity-50"
          >
            {isSaving ? 'Saving...' : 'Save Hours'}
          </button>
        </div>
      </form>
    </div>
  );
}

function DeliveryTab({ producerProfile, onSave, isSaving }) {
  const [delivery, setDelivery] = useState({
    pickup: producerProfile?.deliveryOptions?.pickup ?? true,
    delivery: producerProfile?.deliveryOptions?.delivery ?? false,
    deliveryRadius: producerProfile?.deliveryOptions?.deliveryRadius || '',
    deliveryFee: producerProfile?.deliveryOptions?.deliveryFee || 0
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(delivery);
  };

  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Delivery Options</h3>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="space-y-4">
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={delivery.pickup}
              onChange={(e) => setDelivery({ ...delivery, pickup: e.target.checked })}
              className="rounded border-gray-300 text-orange-500 focus:ring-orange-500"
            />
            <span className="ml-3 text-sm text-gray-700">Offer pickup at my location</span>
          </label>
          
          <label className="flex items-center">
            <input
              type="checkbox"
              checked={delivery.delivery}
              onChange={(e) => setDelivery({ ...delivery, delivery: e.target.checked })}
              className="rounded border-gray-300 text-orange-500 focus:ring-orange-500"
            />
            <span className="ml-3 text-sm text-gray-700">Offer delivery service</span>
          </label>
        </div>

        {delivery.delivery && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Delivery Radius (km)
              </label>
              <input
                type="number"
                value={delivery.deliveryRadius}
                onChange={(e) => setDelivery({ ...delivery, deliveryRadius: e.target.value })}
                className="input-field"
                placeholder="e.g., 10"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Delivery Fee ($)
              </label>
              <input
                type="number"
                step="0.01"
                value={delivery.deliveryFee}
                onChange={(e) => setDelivery({ ...delivery, deliveryFee: e.target.value })}
                className="input-field"
                placeholder="0.00"
              />
            </div>
          </div>
        )}

        <div className="flex justify-end">
          <button
            type="submit"
            disabled={isSaving}
            className="btn-primary disabled:opacity-50"
          >
            {isSaving ? 'Saving...' : 'Save Delivery Options'}
          </button>
        </div>
      </form>
    </div>
  );
}

function PersonalInfoTab({ profile, onSave, isSaving }) {
  const [formData, setFormData] = useState({
    firstName: profile?.firstName || '',
    lastName: profile?.lastName || '',
    phone: profile?.phone || ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Personal Information</h3>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              First Name
            </label>
            <input
              type="text"
              value={formData.firstName}
              onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
              className="input-field"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Last Name
            </label>
            <input
              type="text"
              value={formData.lastName}
              onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
              className="input-field"
              required
            />
          </div>
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Phone Number
          </label>
          <input
            type="tel"
            value={formData.phone}
            onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
            className="input-field"
          />
        </div>
        <div className="flex justify-end">
          <button
            type="submit"
            disabled={isSaving}
            className="btn-primary disabled:opacity-50"
          >
            {isSaving ? 'Saving...' : 'Save Changes'}
          </button>
        </div>
      </form>
    </div>
  );
}

function NotificationsTab({ profile, onSave, isSaving }) {
  const [notifications, setNotifications] = useState(profile?.notificationPreferences || {});

  const handleSave = () => {
    onSave(notifications);
  };

  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Notification Preferences</h3>
      <div className="space-y-6">
        <div>
          <h4 className="font-medium text-gray-900 mb-4">Email Notifications</h4>
          <div className="space-y-3">
            {Object.entries(notifications.email || {}).map(([key, value]) => (
              <label key={key} className="flex items-center">
                <input
                  type="checkbox"
                  checked={value}
                  onChange={(e) => setNotifications({
                    ...notifications,
                    email: { ...notifications.email, [key]: e.target.checked }
                  })}
                  className="rounded border-gray-300 text-orange-500 focus:ring-orange-500"
                />
                <span className="ml-3 text-sm text-gray-700 capitalize">
                  {key.replace(/([A-Z])/g, ' $1').toLowerCase()}
                </span>
              </label>
            ))}
          </div>
        </div>
      </div>
      <div className="flex justify-end mt-6">
        <button
          onClick={handleSave}
          disabled={isSaving}
          className="btn-primary disabled:opacity-50"
        >
          {isSaving ? 'Saving...' : 'Save Preferences'}
        </button>
      </div>
    </div>
  );
}

function PaymentTab() {
  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Payment Settings</h3>
      <div className="text-center py-12">
        <CreditCardIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <p className="text-gray-600">Payment settings will be available here</p>
      </div>
    </div>
  );
}

function SecurityTab() {
  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Security Settings</h3>
      <div className="text-center py-12">
        <ShieldCheckIcon className="w-12 h-12 text-gray-400 mx-auto mb-4" />
        <p className="text-gray-600">Security settings will be available here</p>
      </div>
    </div>
  );
}

function SetupTab({ onSave, isSaving }) {
  const [formData, setFormData] = useState({
    name: '',
    type: 'farm',
    category: '',
    description: '',
    specialties: [],
    address: {
      street: '',
      city: '',
      state: '',
      zipCode: ''
    },
    phone: '',
    email: ''
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(formData);
  };

  const addSpecialty = () => {
    setFormData({
      ...formData,
      specialties: [...formData.specialties, '']
    });
  };

  const updateSpecialty = (index, value) => {
    const newSpecialties = [...formData.specialties];
    newSpecialties[index] = value;
    setFormData({
      ...formData,
      specialties: newSpecialties
    });
  };

  const removeSpecialty = (index) => {
    setFormData({
      ...formData,
      specialties: formData.specialties.filter((_, i) => i !== index)
    });
  };

  return (
    <div>
      <h3 className="text-lg font-semibold text-gray-900 mb-6">Set Up Your Producer Profile</h3>
      <p className="text-gray-600 mb-6">Complete your business profile to start selling your local produce.</p>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Business Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              className="input-field"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Business Type *
            </label>
            <select
              value={formData.type}
              onChange={(e) => setFormData({ ...formData, type: e.target.value })}
              className="input-field"
              required
            >
              <option value="farm">Farm</option>
              <option value="bakery">Bakery</option>
              <option value="individual">Individual Producer</option>
            </select>
          </div>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Category *
          </label>
          <select
            value={formData.category}
            onChange={(e) => setFormData({ ...formData, category: e.target.value })}
            className="input-field"
            required
          >
            <option value="">Select Category</option>
            <option value="Fresh Produce">Fresh Produce</option>
            <option value="Fresh Eggs">Fresh Eggs</option>
            <option value="Fresh Bread">Fresh Bread</option>
            <option value="Dairy">Dairy</option>
            <option value="Meat & Poultry">Meat & Poultry</option>
            <option value="Honey & Jams">Honey & Jams</option>
            <option value="Herbs & Spices">Herbs & Spices</option>
            <option value="Other">Other</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Description
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            className="input-field h-24"
            placeholder="Tell customers about your business and products..."
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Specialties
          </label>
          <div className="space-y-2">
            {formData.specialties.map((specialty, index) => (
              <div key={index} className="flex space-x-2">
                <input
                  type="text"
                  value={specialty}
                  onChange={(e) => updateSpecialty(index, e.target.value)}
                  className="input-field flex-1"
                  placeholder="e.g., Organic Apples"
                />
                <button
                  type="button"
                  onClick={() => removeSpecialty(index)}
                  className="px-3 py-2 text-red-500 hover:text-red-700"
                >
                  <TrashIcon className="w-4 h-4" />
                </button>
              </div>
            ))}
            <button
              type="button"
              onClick={addSpecialty}
              className="btn-secondary text-sm"
            >
              <PlusIcon className="w-4 h-4 mr-1" />
              Add Specialty
            </button>
          </div>
        </div>

        <div>
          <h4 className="font-medium text-gray-900 mb-4">Business Address</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Street Address
              </label>
              <input
                type="text"
                value={formData.address.street}
                onChange={(e) => setFormData({
                  ...formData,
                  address: { ...formData.address, street: e.target.value }
                })}
                className="input-field"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                City
              </label>
              <input
                type="text"
                value={formData.address.city}
                onChange={(e) => setFormData({
                  ...formData,
                  address: { ...formData.address, city: e.target.value }
                })}
                className="input-field"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                State/Province
              </label>
              <input
                type="text"
                value={formData.address.state}
                onChange={(e) => setFormData({
                  ...formData,
                  address: { ...formData.address, state: e.target.value }
                })}
                className="input-field"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ZIP/Postal Code
              </label>
              <input
                type="text"
                value={formData.address.zipCode}
                onChange={(e) => setFormData({
                  ...formData,
                  address: { ...formData.address, zipCode: e.target.value }
                })}
                className="input-field"
              />
            </div>
          </div>
        </div>

        <div className="flex justify-end">
          <button
            type="submit"
            disabled={isSaving}
            className="btn-primary disabled:opacity-50"
          >
            {isSaving ? 'Creating Profile...' : 'Create Producer Profile'}
          </button>
        </div>
      </form>
    </div>
  );
}
