import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  MapPinIcon, 
  PhoneIcon, 
  EnvelopeIcon, 
  ClockIcon,
  StarIcon,
  HeartIcon,
  ShoppingCartIcon,
  TruckIcon,
  UserIcon,
  BuildingStorefrontIcon,
  TagIcon,
  ShieldCheckIcon,
  SparklesIcon,
  CameraIcon,
  PlusIcon,
  MinusIcon,
  XMarkIcon,
  GlobeAltIcon,
  ChevronDownIcon,
  ChevronUpIcon,
  FireIcon,
  ClockIcon as ClockIconSolid,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  MagnifyingGlassIcon
} from '@heroicons/react/24/outline';
import { StarIcon as StarIconSolid, HeartIcon as HeartIconSolid } from '@heroicons/react/24/solid';
import { artisanService } from '../services/artisanService';
import { guestService } from '../services/guestService';
import reviewService from '../services/reviewService';
import toast from 'react-hot-toast';

// Helper function to format business type for display
const formatBusinessType = (type) => {
  const typeMap = {
    'farm': 'Farm',
    'bakery': 'Bakery',
    'restaurant': 'Restaurant',
    'cafe': 'CafÃ©',
    'market': 'Market',
    'butcher': 'Butcher Shop',
    'dairy': 'Dairy',
    'winery': 'Winery',
    'brewery': 'Brewery',
    'distillery': 'Distillery',
    'food_truck': 'Food Truck',
    'catering': 'Catering',
    'grocery': 'Grocery Store',
    'specialty_shop': 'Specialty Food Shop',
    'fish_market': 'Fish Market',
    'organic_store': 'Organic Store',
    'coffee_roaster': 'Coffee Roaster',
    'tea_house': 'Tea House',
    'chocolate_maker': 'Chocolate Maker',
    'cheese_maker': 'Cheese Maker',
    'honey_producer': 'Honey Producer',
    'maple_syrup': 'Maple Syrup Producer',
    'mushroom_farm': 'Mushroom Farm',
    'herb_garden': 'Herb Garden',
    'greenhouse': 'Greenhouse',
    'orchard': 'Orchard',
    'vineyard': 'Vineyard',
    'microgreens': 'Microgreens Farm',
    'aquaponics': 'Aquaponics Farm',
    'hydroponics': 'Hydroponics Farm',
    'other': 'Other'
  };
  return typeMap[type] || type;
};

// Helper function to check if business is currently open
const isBusinessOpen = (businessHours) => {
  if (!businessHours) return null;
  
  const now = new Date();
  const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  const currentDay = days[now.getDay()];
  const currentTime = now.toLocaleTimeString('en-US', { 
    hour12: false, 
    hour: '2-digit', 
    minute: '2-digit' 
  });
  
  const todayHours = businessHours[currentDay];
  if (!todayHours || todayHours.closed) return false;
  
  if (todayHours.open && todayHours.close) {
    return currentTime >= todayHours.open && currentTime <= todayHours.close;
  }
  
  return null;
};

// Helper function to get next open time
const getNextOpenTime = (businessHours) => {
  if (!businessHours) return null;
  
  const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
  const now = new Date();
  const currentDayIndex = now.getDay();
  
  // Check today first
  const today = days[currentDayIndex === 0 ? 6 : currentDayIndex - 1];
  const todayHours = businessHours[today];
  
  if (todayHours && !todayHours.closed && todayHours.open) {
    return `Opens today at ${todayHours.open}`;
  }
  
  // Check next few days
  for (let i = 1; i <= 7; i++) {
    const nextDayIndex = (currentDayIndex + i) % 7;
    const nextDay = days[nextDayIndex === 0 ? 6 : nextDayIndex - 1];
    const nextDayHours = businessHours[nextDay];
    
    if (nextDayHours && !nextDayHours.closed && nextDayHours.open) {
      const dayNames = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
      return `Opens ${dayNames[nextDayIndex]} at ${nextDayHours.open}`;
    }
  }
  
  return null;
};

export default function BusinessDetails() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [business, setBusiness] = useState(null);
  const [products, setProducts] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [favorites, setFavorites] = useState([]);
  const [userId, setUserId] = useState(null);
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedSubcategory, setSelectedSubcategory] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showAllCategories, setShowAllCategories] = useState(false);
  const [cartCount, setCartCount] = useState(0);
  const [reviews, setReviews] = useState([]);
  const [userReview, setUserReview] = useState(null);
  const [showReviewForm, setShowReviewForm] = useState(false);
  const [reviewForm, setReviewForm] = useState({
    rating: 5,
    title: '',
    comment: ''
  });
  const [isSubmittingReview, setIsSubmittingReview] = useState(false);

  useEffect(() => {
    // Get user ID from localStorage
    const token = localStorage.getItem('token');
    if (token) {
      try {
        const payload = JSON.parse(atob(token.split('.')[1]));
        setUserId(payload.userId);
      } catch (error) {
        console.error('Error parsing token:', error);
        setUserId(null);
      }
    } else {
      setUserId(null);
    }
    
    loadBusinessDetails();
    loadFavorites();
    updateCartCount();
    loadReviews();
  }, [id]);

  const loadBusinessDetails = async () => {
    try {
      setIsLoading(true);
      const businessData = await artisanService.getArtisanById(id);
      console.log('Business data loaded:', businessData);
      setBusiness(businessData);
      
      // Load products for this business
      if (businessData.products && Array.isArray(businessData.products)) {
        console.log('Products found:', businessData.products.length);
        setProducts(businessData.products);
      } else {
        console.log('No products found in business data');
        setProducts([]);
      }
    } catch (error) {
      console.error('Error loading business details:', error);
      toast.error('Failed to load business details');
    } finally {
      setIsLoading(false);
    }
  };

  const loadFavorites = () => {
    const savedFavorites = localStorage.getItem('favorite_businesses');
    if (savedFavorites) {
      setFavorites(JSON.parse(savedFavorites));
    }
  };

  const toggleFavorite = () => {
    const newFavorites = favorites.includes(id)
      ? favorites.filter(businessId => businessId !== id)
      : [...favorites, id];
    
    setFavorites(newFavorites);
    localStorage.setItem('favorite_businesses', JSON.stringify(newFavorites));
    
    const action = favorites.includes(id) ? 'removed from' : 'added to';
    toast.success(`${business?.artisanName || 'Business'} ${action} favorites`);
  };

  const addToCart = (product, quantity = 1) => {
    console.log('BusinessDetails addToCart called:', { product: product.name, quantity, userId });
    
    if (quantity > product.stock) {
      toast.error(`Only ${product.stock} items available`);
      return;
    }
    
    // Add seller information to product if not present
    const productWithSeller = {
      ...product,
      seller: business?.user || {
        _id: business?.user?._id || 'unknown',
        firstName: business?.user?.firstName || 'Unknown',
        lastName: business?.user?.lastName || 'Artisan',
        email: business?.user?.email || 'unknown@example.com'
      }
    };
    
    console.log('Product with seller:', productWithSeller);
    
    // Import cartService dynamically to avoid circular dependencies
    import('../services/cartService').then(({ cartService }) => {
      console.log('Calling cartService.addToCart with userId:', userId);
      cartService.addToCart(productWithSeller, quantity, userId);
      toast.success(`${quantity} ${product.name} added to cart`);
      updateCartCount();
    });
  };

  const updateCartCount = () => {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const count = cart.reduce((total, item) => total + item.quantity, 0);
    setCartCount(count);
  };

  const loadReviews = async () => {
    try {
      const reviewsData = await reviewService.getArtisanReviews(id);
      setReviews(reviewsData.reviews || []);
      
      // Load user's review if authenticated
      if (userId) {
        try {
          const userReviewData = await reviewService.getUserReview(id);
          setUserReview(userReviewData);
        } catch (error) {
          if (error.response?.status !== 404) {
            console.error('Error loading user review:', error);
          }
        }
      }
    } catch (error) {
      console.error('Error loading reviews:', error);
    }
  };

  const handleSubmitReview = async (e) => {
    e.preventDefault();
    
    if (!userId) {
      toast.error('Please sign in to leave a review');
      return;
    }

    if (!reviewForm.title.trim() || !reviewForm.comment.trim()) {
      toast.error('Please fill in all fields');
      return;
    }

    setIsSubmittingReview(true);
    
    try {
      if (userReview) {
        // Update existing review
        await reviewService.updateReview(userReview._id, reviewForm);
        toast.success('Review updated successfully');
      } else {
        // Add new review
        await reviewService.addReview(id, reviewForm);
        toast.success('Review added successfully');
      }
      
      // Reload reviews
      await loadReviews();
      setShowReviewForm(false);
      setReviewForm({ rating: 5, title: '', comment: '' });
    } catch (error) {
      console.error('Error submitting review:', error);
      toast.error(error.response?.data?.message || 'Error submitting review');
    } finally {
      setIsSubmittingReview(false);
    }
  };

  const handleDeleteReview = async () => {
    if (!userReview) return;
    
    try {
      await reviewService.deleteReview(userReview._id);
      toast.success('Review deleted successfully');
      setUserReview(null);
      await loadReviews();
    } catch (error) {
      console.error('Error deleting review:', error);
      toast.error('Error deleting review');
    }
  };

  // Helper function to get the correct image URL
  const getImageUrl = (imagePath) => {
    if (!imagePath) return null;
    
    // If it's already a full URL, return as is
    if (imagePath.startsWith('http://') || imagePath.startsWith('https://')) {
      return imagePath;
    }
    
    // If it's a local path, prefix with backend URL
    if (imagePath.startsWith('/')) {
      return `http://localhost:4000${imagePath}`;
    }
    
    return imagePath;
  };

  // Get categories and subcategories from products
  const categories = ['all', ...new Set(products.map(p => p.category).filter(Boolean))];
  const visibleCategories = showAllCategories ? categories : categories.slice(0, 6);

  // Group products by subcategory
  const getProductsBySubcategory = () => {
    const filteredProducts = products.filter(product => {
      const matchesSearch = !searchTerm || 
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.description.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
      const matchesSubcategory = selectedSubcategory === 'all' || product.subcategory === selectedSubcategory;
      
      return matchesSearch && matchesCategory && matchesSubcategory;
    });

    // Group by subcategory
    const grouped = {};
    filteredProducts.forEach(product => {
      const subcategory = product.subcategory || 'Other';
      if (!grouped[subcategory]) {
        grouped[subcategory] = [];
      }
      grouped[subcategory].push(product);
    });

    return grouped;
  };

  const productsBySubcategory = getProductsBySubcategory();
  const subcategories = Object.keys(productsBySubcategory);

  // Helper function to get filtered product count
  const getFilteredProductCount = () => {
    return products.filter(product => {
      const matchesSearch = !searchTerm || 
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.description.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesCategory = selectedCategory === 'all' || product.category === selectedCategory;
      const matchesSubcategory = selectedSubcategory === 'all' || product.subcategory === selectedSubcategory;
      return matchesSearch && matchesCategory && matchesSubcategory;
    }).length;
  };

  // Check if business is open
  const isOpen = isBusinessOpen(business?.artisanHours);
  const nextOpenTime = getNextOpenTime(business?.artisanHours);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading business details...</p>
        </div>
      </div>
    );
  }

  if (!business) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <BuildingStorefrontIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-2xl font-bold mb-4">Business Not Found</h2>
          <p className="text-gray-600 mb-4">The business you're looking for doesn't exist or has been removed.</p>
          <button
            onClick={() => navigate('/find-artisans')}
            className="btn-primary"
          >
            Browse Other Businesses
          </button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-amber-50">

      {/* Header with Business Info */}
      <div className="bg-white shadow-sm border-b border-amber-200 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => navigate('/find-artisans')}
                className="p-2 rounded-lg hover:bg-amber-50 transition-colors"
              >
                â Back
              </button>
              <div className="flex items-center space-x-3">
                {business.photos && business.photos.length > 0 && (
                  <img
                    src={business.photos[0]}
                    alt={business.artisanName}
                    className="w-12 h-12 rounded-lg object-cover"
                  />
                )}
                <div>
                  <h1 className="text-3xl font-bold text-gray-900">{business.artisanName}</h1>
                  <div className="flex items-center space-x-2 text-sm text-gray-600">
                    <div className="flex items-center">
                      <StarIconSolid className="h-4 w-4 text-yellow-400 mr-1" />
                      <span>{business.rating?.average || 0}</span>
                      <span className="ml-1">({business.rating?.count || 0})</span>
                    </div>
                    <span>â¢</span>
                    <span className="capitalize">{business.type?.replace('_', ' ')}</span>
                    <span>â¢</span>
                    {isOpen !== null ? (
                      <span className={`flex items-center font-medium ${isOpen ? 'text-green-600' : 'text-red-600'}`}>
                        {isOpen ? (
                          <>
                            <CheckCircleIcon className="h-4 w-4 mr-1" />
                            Open Now
                          </>
                        ) : (
                          <>
                            <ExclamationTriangleIcon className="h-4 w-4 mr-1" />
                            Currently Closed
                          </>
                        )}
                      </span>
                    ) : (
                      <span className="text-gray-500">Hours not available</span>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <button
                onClick={toggleFavorite}
                className="p-2 text-gray-600 hover:text-red-500 transition-colors"
              >
                {favorites.includes(id) ? (
                  <HeartIconSolid className="h-6 w-6 text-red-500" />
                ) : (
                  <HeartIcon className="h-6 w-6" />
                )}
              </button>
              
              <button
                onClick={() => navigate('/cart')}
                className="relative p-2 text-gray-600 hover:text-orange-600 transition-colors"
              >
                <ShoppingCartIcon className="h-6 w-6" />
                {cartCount > 0 && (
                  <span className="absolute -top-1 -right-1 bg-orange-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center">
                    {cartCount}
                  </span>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

        {/* Business Status Banner */}
        {isOpen === false && nextOpenTime && (
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-4 mx-4 mt-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <ClockIconSolid className="h-5 w-5 text-orange-600" />
                <span className="text-orange-800 font-medium">Currently Closed</span>
              </div>
              <span className="text-orange-700 text-sm">{nextOpenTime}</span>
            </div>
          </div>
        )}

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Horizontal Scrollable Category Section (Uber Eats Style) */}
          <div className="mb-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Menu Categories</h2>
            <div className="relative">
              {/* Horizontal Scrollable Container */}
              <div className="flex space-x-4 overflow-x-auto pb-4 scrollbar-hide">
                {categories.map((category) => (
                  <button
                    key={category}
                    onClick={() => {
                      setSelectedCategory(category);
                      setSelectedSubcategory('all');
                    }}
                    className={`group flex-shrink-0 bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105 min-w-[140px] ${
                      selectedCategory === category
                        ? 'ring-2 ring-amber-500 bg-amber-50'
                        : 'hover:border-amber-200'
                    }`}
                  >
                    <div className="text-3xl mb-2 group-hover:scale-110 transition-transform text-center">
                      {category === 'all' ? 'ð½ï¸' : 
                       category === 'bakery' ? 'ð¥' :
                       category === 'dairy' ? 'ð¥' :
                       category === 'produce' ? 'ð¥¬' :
                       category === 'meat' ? 'ð¥©' :
                       category === 'beverages' ? 'ð¥¤' :
                       category === 'preserves' ? 'ð¯' :
                       category === 'specialty' ? 'â­' : 'ð½ï¸'}
                    </div>
                    <h3 className="font-medium text-gray-900 group-hover:text-amber-600 transition-colors text-sm text-center">
                      {category === 'all' ? 'All Items' : category}
                    </h3>
                    <p className="text-xs text-gray-500 mt-1 text-center">
                      {getFilteredProductCount()} items
                    </p>
                  </button>
                ))}
              </div>
              
              {/* Gradient Overlay for Scroll Indication */}
              <div className="absolute right-0 top-0 bottom-4 w-8 bg-gradient-to-l from-amber-50 to-transparent pointer-events-none"></div>
            </div>
          </div>

          {/* Search and Filters */}
          <div className="mb-8">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <form onSubmit={(e) => e.preventDefault()} className="relative">
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    placeholder="Search products..."
                    className="w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-amber-500 focus:border-transparent"
                  />
                  <MagnifyingGlassIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
                </form>
                
                <div className="text-sm text-gray-600">
                  {getFilteredProductCount()} item{getFilteredProductCount() !== 1 ? 's' : ''} available
                </div>
              </div>
            </div>
          </div>

          {/* Products Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            {filteredProducts.length === 0 ? (
              <div className="col-span-full text-center py-12 bg-white rounded-lg shadow-sm border">
                <TagIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No products found</h3>
                <p className="text-gray-600">
                  Try adjusting your search or category filters
                </p>
              </div>
            ) : (
              filteredProducts.map((product) => (
                <ProductCard 
                  key={product._id} 
                  product={product} 
                  onAddToCart={addToCart}
                  getImageUrl={getImageUrl}
                />
              ))
            )}
          </div>

            {/* Reviews Section */}
            <div className="mt-12 bg-white rounded-lg shadow-sm border p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Customer Reviews</h2>
                <div className="flex items-center space-x-2">
                  <div className="flex items-center">
                    <StarIconSolid className="h-5 w-5 text-yellow-400 mr-1" />
                    <span className="font-semibold">{business.rating?.average || 0}</span>
                  </div>
                  <span className="text-gray-600">({business.rating?.count || 0} reviews)</span>
                  {userId && (
                    <button
                      onClick={() => setShowReviewForm(!showReviewForm)}
                      className="ml-4 px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors text-sm font-medium"
                    >
                      {userReview ? 'Edit Review' : 'Write Review'}
                    </button>
                  )}
                </div>
              </div>

              {/* Review Form */}
              {showReviewForm && (
                <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                  <form onSubmit={handleSubmitReview}>
                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-2">Rating</label>
                      <div className="flex items-center space-x-1">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <button
                            key={star}
                            type="button"
                            onClick={() => setReviewForm(prev => ({ ...prev, rating: star }))}
                            className="focus:outline-none"
                          >
                            <StarIcon
                              className={`h-6 w-6 ${
                                star <= reviewForm.rating
                                  ? 'text-yellow-400 fill-current'
                                  : 'text-gray-300'
                              }`}
                            />
                          </button>
                        ))}
                      </div>
                    </div>

                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-2">Title</label>
                      <input
                        type="text"
                        value={reviewForm.title}
                        onChange={(e) => setReviewForm(prev => ({ ...prev, title: e.target.value }))}
                        placeholder="Brief summary of your experience"
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                        maxLength={100}
                      />
                    </div>

                    <div className="mb-4">
                      <label className="block text-sm font-medium text-gray-700 mb-2">Comment</label>
                      <textarea
                        value={reviewForm.comment}
                        onChange={(e) => setReviewForm(prev => ({ ...prev, comment: e.target.value }))}
                        placeholder="Share your experience with this artisan..."
                        rows={4}
                        className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                        maxLength={1000}
                      />
                    </div>

                    <div className="flex items-center space-x-3">
                      <button
                        type="submit"
                        disabled={isSubmittingReview}
                        className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium"
                      >
                        {isSubmittingReview ? 'Submitting...' : (userReview ? 'Update Review' : 'Submit Review')}
                      </button>
                      <button
                        type="button"
                        onClick={() => {
                          setShowReviewForm(false);
                          setReviewForm({ rating: 5, title: '', comment: '' });
                        }}
                        className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
                      >
                        Cancel
                      </button>
                      {userReview && (
                        <button
                          type="button"
                          onClick={handleDeleteReview}
                          className="px-4 py-2 text-red-600 hover:text-red-800 transition-colors"
                        >
                          Delete Review
                        </button>
                      )}
                    </div>
                  </form>
                </div>
              )}
              
              {/* Reviews List */}
              <div className="space-y-4">
                {reviews.length === 0 ? (
                  <div className="text-center py-8">
                    <p className="text-gray-500">No reviews yet. Be the first to review this artisan!</p>
                  </div>
                ) : (
                  reviews.map((review) => (
                    <div key={review._id} className="border-b border-gray-200 pb-4 last:border-b-0">
                      <div className="flex items-start justify-between mb-2">
                        <div className="flex items-center space-x-2">
                          <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center">
                            <span className="text-orange-600 font-medium text-sm">
                              {review.user?.firstName?.charAt(0) || 'U'}
                            </span>
                          </div>
                          <div>
                            <p className="font-medium text-gray-900">
                              {review.user?.firstName} {review.user?.lastName}
                            </p>
                            <div className="flex items-center space-x-1">
                              {[1, 2, 3, 4, 5].map((star) => (
                                <StarIcon
                                  key={star}
                                  className={`h-4 w-4 ${
                                    star <= review.rating
                                      ? 'text-yellow-400 fill-current'
                                      : 'text-gray-300'
                                  }`}
                                />
                              ))}
                            </div>
                          </div>
                        </div>
                        <span className="text-sm text-gray-500">
                          {new Date(review.createdAt).toLocaleDateString()}
                        </span>
                      </div>
                      {review.title && (
                        <h4 className="font-medium text-gray-900 mb-1">{review.title}</h4>
                      )}
                      <p className="text-gray-700">{review.comment}</p>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  function ProductCard({ product, onAddToCart, getImageUrl }) {
    const [quantity, setQuantity] = useState(1);
    const [showPopup, setShowPopup] = useState(false);
  
    const handleAddToCart = () => {
      onAddToCart(product, quantity);
      setQuantity(1);
      setShowPopup(false);
    };
  
    return (
      <>
        <div 
          className="rounded-xl shadow-sm border border-gray-200 overflow-hidden transition-all duration-300 group cursor-pointer bg-white hover:shadow-lg hover:border-amber-200"
          onClick={() => setShowPopup(true)}
          role="button"
          tabIndex={0}
          onKeyDown={(e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              setShowPopup(true);
            }
          }}
        >
          <div className="relative">
            {/* Product Image */}
            <div className="aspect-w-16 aspect-h-9 bg-gray-100 rounded-t-xl overflow-hidden relative">
              {product.image ? (
                <img
                  src={getImageUrl(product.image)}
                  alt={product.name}
                  className="w-full h-48 object-cover transition-all duration-500 group-hover:scale-105"
                  onError={(e) => {
                    console.error('Image failed to load:', getImageUrl(product.image));
                    e.target.style.display = 'none';
                    e.target.nextSibling.style.display = 'flex';
                  }}
                />
              ) : null}
              <div className="w-full h-48 bg-gradient-to-br from-stone-200 to-stone-300 flex items-center justify-center" style={{ display: product.image ? 'none' : 'flex' }}>
                <CameraIcon className="w-16 h-16 text-stone-400" />
              </div>
              
              {/* Status Badge */}
              <div className="absolute top-4 left-4">
                <span className={`px-2 py-1 rounded-full text-xs font-medium shadow-sm ${
                  product.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                }`}>
                  {product.status === 'active' ? 'Available' : 'Unavailable'}
                </span>
              </div>

              {/* Popular Badge */}
              {product.stock < 10 && product.stock > 0 && (
                <div className="absolute top-4 right-4">
                  <span className="px-2 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-800 flex items-center shadow-sm">
                    <FireIcon className="h-3 w-3 mr-1" />
                    Popular
                  </span>
                </div>
              )}
            </div>
            
            {/* Product Tags */}
            <div className="absolute bottom-4 left-4 flex flex-wrap gap-2">
              {product.isOrganic && (
                <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 shadow-sm">Organic</span>
              )}
              {product.isGlutenFree && (
                <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 shadow-sm">Gluten-Free</span>
              )}
              {product.isVegan && (
                <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 shadow-sm">Vegan</span>
              )}
              {product.isHalal && (
                <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800 shadow-sm">Halal</span>
              )}
            </div>
          </div>

          <div className="p-4">
            {/* Product Name and Price */}
            <div className="flex items-start justify-between mb-3">
              <h3 className="text-lg font-semibold text-gray-900 group-hover:text-amber-600 transition-colors duration-300 line-clamp-2">
                {product.name}
              </h3>
              <div className="flex items-baseline ml-2">
                <span className="text-xl font-bold text-orange-600">${product.price}</span>
                <span className="text-sm text-gray-500 ml-1">/{product.unit}</span>
              </div>
            </div>

            {/* Description */}
            <p className="text-sm text-gray-600 mb-4 line-clamp-2">
              {product.description || 'Delicious local product from our artisan.'}
            </p>

            {/* Stock and Lead Time */}
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center text-sm text-gray-500">
                <span>{product.stock > 0 ? `${product.stock} in stock` : 'Out of stock'}</span>
              </div>
              {product.leadTimeHours && (
                <div className="flex items-center text-sm text-gray-500">
                  <ClockIcon className="h-4 w-4 mr-1" />
                  <span>{product.leadTimeHours}h lead time</span>
                </div>
              )}
            </div>

            {/* Action */}
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-600">Click to add to cart</span>
              <div className="flex items-center space-x-1">
                <StarIcon className="w-4 h-4 text-amber-500" />
                <span className="text-sm font-medium text-gray-900">4.5</span>
                <span className="text-xs text-gray-500">(12)</span>
              </div>
            </div>
          </div>
        </div>

        {/* Add to Cart Popup */}
        {showPopup && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setShowPopup(false)}>
            <div className="bg-white rounded-lg p-6 max-w-sm w-full mx-4" onClick={(e) => e.stopPropagation()}>
              <div className="flex items-start justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">{product.name}</h3>
                <button
                  onClick={() => setShowPopup(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <XMarkIcon className="h-6 w-6" />
                </button>
              </div>

              {/* Product Image in Popup */}
              <div className="relative h-48 bg-gray-100 rounded-lg mb-4">
                {product.image ? (
                  <img
                    src={getImageUrl(product.image)}
                    alt={product.name}
                    className="w-full h-full object-cover rounded-lg"
                  />
                ) : (
                  <div className="w-full h-full flex items-center justify-center">
                    <CameraIcon className="h-16 w-16 text-gray-400" />
                  </div>
                )}
              </div>

              {/* Product Details */}
              <div className="mb-4">
                <p className="text-gray-600 text-sm mb-3">{product.description}</p>
                
                <div className="flex items-center justify-between mb-2">
                  <span className="text-2xl font-bold text-orange-600">${product.price}</span>
                  <span className="text-sm text-gray-500">per {product.unit}</span>
                </div>

                <div className="flex items-center justify-between text-sm text-gray-500 mb-3">
                  <span>Stock: {product.stock}</span>
                  {product.leadTimeHours && (
                    <span className="flex items-center">
                      <ClockIcon className="h-4 w-4 mr-1" />
                      {product.leadTimeHours}h lead time
                    </span>
                  )}
                </div>

                {/* Dietary Info */}
                <div className="flex gap-2 mb-4">
                  {product.isOrganic && (
                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      <SparklesIcon className="h-3 w-3 inline mr-1" />
                      Organic
                    </span>
                  )}
                  {product.isGlutenFree && (
                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      Gluten-Free
                    </span>
                  )}
                  {product.isVegan && (
                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                      Vegan
                    </span>
                  )}
                  {product.isHalal && (
                    <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                      Halal
                    </span>
                  )}
                </div>
              </div>

              {/* Quantity Selector */}
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">Quantity</label>
                <div className="flex items-center space-x-3">
                  <div className="flex items-center border border-gray-300 rounded-lg">
                    <button
                      onClick={() => setQuantity(Math.max(1, quantity - 1))}
                      className="px-3 py-2 text-gray-600 hover:text-gray-800"
                    >
                      <MinusIcon className="h-4 w-4" />
                    </button>
                    <span className="px-4 py-2 border-x border-gray-300 font-medium">{quantity}</span>
                    <button
                      onClick={() => setQuantity(Math.min(product.stock, quantity + 1))}
                      className="px-3 py-2 text-gray-600 hover:text-gray-800"
                    >
                      <PlusIcon className="h-4 w-4" />
                    </button>
                  </div>
                  <span className="text-sm text-gray-500">Max: {product.stock}</span>
                </div>
              </div>

              {/* Add to Cart Button */}
              <button
                onClick={handleAddToCart}
                disabled={product.status !== 'active' || product.stock === 0}
                className="w-full bg-orange-500 text-white py-3 px-4 rounded-lg hover:bg-orange-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium"
              >
                {product.status === 'active' && product.stock > 0 
                  ? `Add ${quantity} to Cart - $${(product.price * quantity).toFixed(2)}`
                  : 'Currently Unavailable'
                }
              </button>
            </div>
          </div>
        )}
      </>
    );
  }

        )}
      </>
    );
  }
